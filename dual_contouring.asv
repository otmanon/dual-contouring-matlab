function [V, E, N] = dual_contouring(signedD, Ng, Vg, Fg, iso_value)
%DUAL_CONTOURING Summary of this function goes here
%   Detailed explanation goes here
Eg = quad_edges(Fg);

% edges with a sign flip
bI = boundary_cells(Fg, signedD);

bIe = boundary_cells(Eg, signedD);

%Find where the sign flip occurs using linear interpolation
BE = Eg(bIe, :);

iso_val = 0;

D = signedD(BE);
diffD = abs(D(:, 2) - D(:, 1));
s1 = abs(iso_val - D(:, 2)) ./ diffD ;
s2 =  abs(iso_val - D(:, 1)) ./ diffD;
V_temp = Vg(BE(:, 1), :) .* s1 + Vg(BE(:, 2), :) .* s2;
N_temp = Ng(BE(:, 1), :) .* s1 + Ng(BE(:, 2), :) .* s2;

Fb = Fg(bI, :);
QE = quad_edge_adjacency(Fb, BE);
%removeI = QE(:, 1) < 0;
%E = QE(~removeI, :)
X = [];
for i=1:size(QE, 1)
    %for each quad
    %get all the normals
    A = [];
    b = [];
    for j=1:size(QE, 2)
        %We form an A matrix of normals
        A = [A; N_temp(j, :)];
        b = [b; N_temp(j, :)*V_temp(j, :)'];
    end
    H = A'*A;
    B = A'*b;
    x = H\B;
    X = [X; x'];
end

V = X;
E = edge_quad_adjacency(Fb, BE);

end

